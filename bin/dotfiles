#!/bin/bash

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP
Initialize dotfiles
http://benalman.com/

Usage: `basename "$0"`

Copyright (c) 2011 "Cowboy" Ben Alman
Licensed under the MIT license.
http://benalman.com/about/license/
HELP
exit; fi

# Logging
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;33m➜\033[0m  $@"; }

# Execute something inside an init script, capturing errors.
# function init_exec() {
#   local err
#   err=$("$@" 2>&1 >/dev/null)
#   if (( $? != 0 )); then
#     e_error "$err"
#     return 2
#   fi
# }

# Given a list of desired items and installed items, return a list
# of uninstalled items.
function to_install() {
  local desired installed i desired_s installed_s remain
  read -ra desired < <(echo "$1" | tr '\n' ' ')
  read -ra installed < <(echo "$2" | tr '\n' ' ')
  # echo "desired: ${#desired[@]} ${desired[@]}"
  # echo "installed: ${#installed[@]} ${installed[@]}"
  while read -r; do desired_s[i++]=$REPLY; done < <(
    printf "%s\n" "${desired[@]}" | sort
  )
  unset i
  while read -r; do installed_s[i++]=$REPLY; done < <(
    printf "%s\n" "${installed[@]}" | sort
  )
  unset i
  while read -r; do remain[i++]=$REPLY; done < <(
    comm -13 <(printf "%s\n" "${installed_s[@]}") <(printf "%s\n" "${desired_s[@]}")
  )
  echo "${remain[@]}"
}

# Initialize.
function init_do() {
  source "$2"
  #output=$(source "$2" 2> /dev/null)
  # local err=$?
  # if (( $err != 1 )); then
  #   echo " Running $1..."
  #   if [[ "$output" ]]; then
  #     echo "$output"
  #   else
  #     e_success "Done"
  #   fi
  # fi
}

# Copy files.
function copy_header() { e_header "Copying files into home directory"; }
function copy_test() {
  if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
    echo "same file"
  elif [[ "$1" -ot "$2" ]]; then
    echo "destination file newer"
  fi
}
function copy_do() {
  e_success "Copying ~/$1."
  cp "$2" ~/
}

# Link files.
function link_header() { e_header "Linking files into home directory"; }
function link_test() {
  [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
  e_success "Linking ~/$1."
  ln -sf ${2#$HOME/} ~/
}

# Copy, link, etc.
function do_stuff() {
  local base dest skip
  local files=(~/.dotfiles/$1/*)
  if (( ${#files[@]} == 0 )); then return; fi
  if [[ $(declare -f "$1_header") ]]; then
    "$1_header"
  fi
  for file in ${files[@]}; do
    base="$(basename $file)"
    dest="$HOME/$base"
    if [[ $(declare -f "$1_test") ]]; then
      skip="$("$1_test" "$file" "$dest")"
      if [[ "$skip" ]]; then
        e_error "Skipping ~/$base, $skip."
        continue
      fi
      if [[ -e "$dest" ]]; then
        e_arrow "Backing up ~/$base."
        backup=1
        if [ ! -e "$backup_dir" ]; then
          mkdir -p "$backup_dir";
        fi
        mv "$dest" "$backup_dir"
      fi
    fi
    "$1_do" "$base" "$file"
  done
}

# If on OSX and git is not installed, install homebrew and git.
if [[ ! "$(type -p git)" && "$OSTYPE" =~ ^darwin ]]; then
  if [[ ! "$(type -p brew)" ]]; then
    e_header "Installing Homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
  fi
  e_header "Installing Git"
  brew install git
fi

# Initialize.
if [ ! -d ~/.dotfiles ]; then
  # Doesn't exist? Clone it!
  e_header "Downloading files"
  git clone --recursive git://github.com/cowboy/dotfiles.git ~/.dotfiles
  cd ~/.dotfiles
else
  # Make sure we have the latest files.
  e_header "Updating files"
  cd ~/.dotfiles
  git pull origin master
  git submodule update --init --recursive
fi

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

# Actually do stuff.
backup_dir="$HOME/.dotfiles/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=
do_stuff "init"
do_stuff "copy"
do_stuff "link"

# Alert if backups were made.
if [ "$backup" ]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# All done!
e_header "All done!"
