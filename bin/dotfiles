#!/bin/bash

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP
Initialize dotfiles
http://benalman.com/

Usage: `basename "$0"`

Copyright (c) 2011 "Cowboy" Ben Alman
Licensed under the MIT license.
http://benalman.com/about/license/
HELP
exit; fi

# Logging
function e_header() { echo -e "\033[1m$@\033[0m"; }
function e_check()     { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_x()  { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow() { echo -e " \033[1;33m➜\033[0m  $@"; }

# Doesn't exist? Clone it!
if [ ! -d ~/.dotfiles ]; then
  header "Downloading files..."
  git clone --recursive git://github.com/cowboy/dotfiles.git ~/.dotfiles
fi

# Gotta start somewhere.
cd ~/.dotfiles

# Make sure we have the latest files.
e_header "Checking git for updates..."
git pull origin master
git submodule update --init --recursive

# Enable dotfile globbing
shopt -q dotglob
DOTGLOBOFF=$?
shopt -s dotglob

# Copy files.
function copy_init() { e_header "Copying files into home directory..."; }
function copy_test() {
  if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
    echo "same file"
  elif [[ "$1" -ot "$2" ]]; then
    echo "destination file newer"
  fi
}
function copy_do() {
  e_check "Copying ~/$1."
  cp "$2" ~/
}

# Link files.
function link_init() { e_header "Linking files into home directory..."; }
function link_test() {
  [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
  e_check "Linking ~/$1."
  ln -sf ${2#$HOME/} ~/
}

# Copy, link, etc.
function do_stuff() {
  echo
  "$1_init"
  for FILE in ~/.dotfiles/$1/*; do
    BASE="$(basename $FILE)"
    DEST="$HOME/$BASE"
    REPLY=Y
    SKIP="$("$1_test" "$FILE" "$DEST")"
    if [[ "$SKIP" ]]; then
      e_x "Skipping ~/$BASE, $SKIP."
      continue
    fi
    if [[ ! "$ALL" && -e "$DEST" ]]; then
      e_arrow "Backing up ~/$BASE."
      BACKUP=1
      if [ ! -e "$BACKUPDIR" ]; then
        mkdir -p "$BACKUPDIR";
      fi
      mv "$DEST" "$BACKUPDIR"
    fi
    "$1_do" "$BASE" "$FILE"
  done
}

# Actually do stuff.
BACKUPDIR="$HOME/.dotfiles/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
BACKUP=
do_stuff "copy"
do_stuff "link"

# Alert if backups were made.
if [ "$BACKUP" ]; then
  echo -e "\nBackups were moved to ~/${BACKUPDIR#$HOME/}"
fi

# Restore dotfile globbing to its previous value
if [ "$DOTGLOBOFF" ]; then
  shopt -u dotglob
fi

# All done!
e_header "\nAll done!"
