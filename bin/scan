#!/usr/bin/env ruby

if ARGV[0] == "-h" || ARGV[0] == "--help" then puts <<-HELP
Scan everything on your subnet(s).
http://benalman.com/

Usage: #{File.basename $0} [full]

Scans your subnet(s) using nmap, displaying results in a pretty format. If *
appears at the end of the line, that IP is currently bound to this machine.

Specify "full" for a full subnet port scan (this can take a while).

Maybe it'll help you find that server you lost. It didn't help me--but that's
only because the machine I was looking for wasn't connected. Whoops.

Copyright (c) 2012 "Cowboy" Ben Alman
Licensed under the MIT license.
http://benalman.com/about/license/
HELP
exit; end

ips = []
subnets = []

# Get IPs and subnets we care about from ifconfig. Basically, from any network
# device starting with the letter "e" (en0, en1, eth0, eth1, etc).
ether = nil
%x{ifconfig}.each_line do |line|
  if line =~ /^(\S)/
    # If the line starts with a letter, set a flag if that letter is "e".
    ether = $1 == 'e'
  elsif ether && line =~ /inet (?:addr:)?((\d+\.\d+\.\d+)\.\d+)/
    # Save IP address (1.2.3.4) and subnet (1.2.3.*) for later.
    ips << $1
    subnets << "#{$2}.*"
  end
end

# Get a space-delimited list of unique subnets to be scanned.
subnets = subnets.uniq.join ' '

# Since nmap only supports saving greppable output to a file and not STDOUT,
# create a tempfile.
require 'tempfile'
tmp = Tempfile.new 'scan'

if ARGV[0] == 'full'
  puts "Scanning #{subnets} (full scan, be patient)"
  opts = '-sT' # The works (full port scan).
else
  puts "Scanning #{subnets}"
  opts = '-sP' # Relatively quick scan.
end

# Actually perform scan.
%x{nmap #{opts} -oG "#{tmp.path}" #{subnets} >/dev/null 2>&1}

# Parse scan results.
skip = ''
tmp.read.each_line do |line|
  if line =~ /^Host: (\S+) \((\S*)\).*Status: Up$/
    # Found an IP.
    ip = $1
    hostname = $2.empty? ? '???' : $2
    # If the found IP is bound to a local adapter we care about, show a *.
    isbound = ips.include?(ip) ? ' *' : ''
    # Output the IP / hostname.
    puts "#{skip}#{ip}#{' ' * (16 - ip.length)}#{hostname}#{isbound}"
  elsif line =~ /Ports: (.*?)\t/
    # This only appears in the tempfile if a full port scan was done.
    # Output the port details.
    $1.split(', ').each do |part|
      parts = part.split '/'
      printf " :%-5d   %s   %s\n", parts[0], parts[2], parts[4]
    end
    # The next time an IP is displayed, skip a line.
    skip = "\n"
  end
end

# Cleanup.
tmp.close
tmp.unlink
