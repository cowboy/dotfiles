#!/usr/bin/env python
import sys, os
import SimpleHTTPServer
import argparse

# Creat an arg parser & identify the various arguments we can have.
# note the '-' prefix on the argument names. That means they're optional
parser = argparse.ArgumentParser(
    description='Serve a file using %(prog)s (or the current directory)\n\nhttp://benalman.com/')
    
parser.add_argument('-port', type=int, default=8080, nargs='+', 
    help='The port under which the http server should run (defaults to 8080)')
    
parser.add_argument('-file', default="", 
    help='The file the server should point to (defaults to present working directory)')

args = parser.parse_args()

# If not in an SSH session, open the URL in the default handler.
if not "SSH_TTY" in os.environ:
    os.system("open 'http://localhost:%d/%s'" % (args.port, args.file))

# Redefining the default content-type to text/plain instead of the default
# application/octet-stream allows "unknown" files to be viewable in-browser
# as text instead of being downloaded, which makes me happy.
extensions_map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map
# Set the default content type to text/plain.
extensions_map[""] = "text/plain"
# Serving everything as UTF-8 by default makes funky characters render
# correctly and shouldn't break anything (per Mathias Bynens).
for key, value in extensions_map.items():
  extensions_map[key] = value + "; charset=UTF-8"

# Start the server using the default .test method, because I'm lazy (the port
# is still grabbed from sys.argv[1]).
sys.argv = [sys.argv[0], args.port]
SimpleHTTPServer.test()
